import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Package, Truck, CheckCircle, XCircle } from "lucide-react";
import { format } from "date-fns";
import { ar } from "date-fns/locale";

export default function OrderTracking() {
  const [trackingNumber, setTrackingNumber] = useState("");
  const [searchResult, setSearchResult] = useState(null);

  const { data: orders = [] } = useQuery({
    queryKey: ['orders'],
    queryFn: () => base44.entities.Order.list('-created_date'),
  });

  const handleSearch = () => {
    const found = orders.find(o => 
      o.order_number?.toLowerCase() === trackingNumber.toLowerCase() ||
      o.id.toLowerCase() === trackingNumber.toLowerCase()
    );
    setSearchResult(found || "not_found");
  };

  const statusSteps = {
    pending: { label: "قيد الانتظار", icon: Package, color: "yellow" },
    confirmed: { label: "تم التأكيد", icon: CheckCircle, color: "blue" },
    processing: { label: "قيد التجهيز", icon: Package, color: "purple" },
    shipped: { label: "تم الشحن", icon: Truck, color: "indigo" },
    delivered: { label: "تم التوصيل", icon: CheckCircle, color: "green" },
    cancelled: { label: "ملغي", icon: XCircle, color: "red" }
  };

  return (
    <div className="p-6 space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-gray-900">تتبع الطلبات</h1>
        <p className="text-gray-500 mt-1">تتبع حالة الطلبات ومعرفة موقعها</p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>البحث عن طلب</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex gap-4">
            <Input
              placeholder="أدخل رقم الطلب..."
              value={trackingNumber}
              onChange={(e) => setTrackingNumber(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
            />
            <Button onClick={handleSearch} className="bg-blue-600 hover:bg-blue-700">
              <Search className="w-4 h-4 ml-2" />
              بحث
            </Button>
          </div>
        </CardContent>
      </Card>

      {searchResult === "not_found" && (
        <Card className="border-red-200 bg-red-50">
          <CardContent className="p-6 text-center">
            <XCircle className="w-12 h-12 text-red-600 mx-auto mb-2" />
            <p className="font-semibold text-red-900">لم يتم العثور على الطلب</p>
            <p className="text-sm text-red-700">تأكد من رقم الطلب وحاول مرة أخرى</p>
          </CardContent>
        </Card>
      )}

      {searchResult && searchResult !== "not_found" && (
        <Card>
          <CardHeader>
            <CardTitle>تفاصيل الطلب</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <p className="text-sm text-gray-500">رقم الطلب</p>
                <p className="font-bold text-lg">{searchResult.order_number || `#${searchResult.id.substring(0, 8)}`}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">التاريخ</p>
                <p className="font-bold">{format(new Date(searchResult.created_date), "dd MMMM yyyy", { locale: ar })}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">العميل</p>
                <p className="font-bold">{searchResult.customer_name}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">المجموع</p>
                <p className="font-bold text-blue-600">{searchResult.total.toLocaleString('ar-SY')} ل.س</p>
              </div>
            </div>

            <div>
              <h3 className="font-semibold text-lg mb-4">مراحل الطلب</h3>
              <div className="space-y-4">
                {Object.entries(statusSteps).map(([key, step]) => {
                  const Icon = step.icon;
                  const isActive = searchResult.status === key;
                  const statusIndex = Object.keys(statusSteps).indexOf(searchResult.status);
                  const stepIndex = Object.keys(statusSteps).indexOf(key);
                  const isPassed = stepIndex <= statusIndex && searchResult.status !== 'cancelled';
                  
                  return (
                    <div key={key} className={`flex items-center gap-4 p-4 rounded-lg transition-all ${
                      isActive ? `bg-${step.color}-50 border-2 border-${step.color}-500` : 
                      isPassed ? 'bg-gray-50' : 'bg-white border border-gray-200'
                    }`}>
                      <div className={`p-3 rounded-full ${
                        isActive ? `bg-${step.color}-100` : 
                        isPassed ? 'bg-green-100' : 'bg-gray-100'
                      }`}>
                        <Icon className={`w-6 h-6 ${
                          isActive ? `text-${step.color}-600` : 
                          isPassed ? 'text-green-600' : 'text-gray-400'
                        }`} />
                      </div>
                      <div className="flex-1">
                        <p className={`font-semibold ${isActive ? `text-${step.color}-900` : 'text-gray-700'}`}>
                          {step.label}
                        </p>
                        {isActive && (
                          <p className="text-sm text-gray-600">الحالة الحالية</p>
                        )}
                      </div>
                      {isPassed && !isActive && (
                        <CheckCircle className="w-5 h-5 text-green-600" />
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

