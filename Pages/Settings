import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2, Percent, DollarSign } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";

export default function Settings() {
  const [priceChange, setPriceChange] = useState({ type: 'percentage', value: 0 });
  const [isUpdating, setIsUpdating] = useState(false);
  const [message, setMessage] = useState(null);
  
  const queryClient = useQueryClient();

  const { data: products = [] } = useQuery({
    queryKey: ['products'],
    queryFn: () => base44.entities.Product.list(),
  });

  const handleBulkPriceUpdate = async () => {
    setIsUpdating(true);
    setMessage(null);
    
    try {
      const updates = products.map(product => {
        let newPrice = product.price;
        
        if (priceChange.type === 'percentage') {
          newPrice = product.price * (1 + priceChange.value / 100);
        } else {
          newPrice = product.price + priceChange.value;
        }
        
        return {
          id: product.id,
          price: Math.round(newPrice)
        };
      });

      await Promise.all(
        updates.map(update => 
          base44.entities.Product.update(update.id, { price: update.price })
        )
      );

      queryClient.invalidateQueries({ queryKey: ['products'] });
      setMessage({ type: 'success', text: `تم تحديث أسعار ${updates.length} منتج بنجاح!` });
      setPriceChange({ type: 'percentage', value: 0 });
    } catch (error) {
      setMessage({ type: 'error', text: 'حدث خطأ أثناء تحديث الأسعار' });
    }
    
    setIsUpdating(false);
  };

  return (
    <div className="p-6 space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-gray-900">الإعدادات</h1>
        <p className="text-gray-500 mt-1">إعدادات وتحكم متقدم بالمتجر</p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>تعديل الأسعار بشكل جماعي</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {message && (
            <Alert variant={message.type === 'success' ? 'default' : 'destructive'}>
              <AlertDescription>{message.text}</AlertDescription>
            </Alert>
          )}

          <div className="space-y-4">
            <div className="grid md:grid-cols-2 gap-4">
              <button
                onClick={() => setPriceChange({...priceChange, type: 'percentage'})}
                className={`p-4 border-2 rounded-lg transition-all ${
                  priceChange.type === 'percentage' 
                    ? 'border-blue-600 bg-blue-50' 
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <Percent className="w-6 h-6 mx-auto mb-2 text-blue-600" />
                <p className="font-semibold">نسبة مئوية</p>
                <p className="text-sm text-gray-500">زيادة أو تخفيض بنسبة معينة</p>
              </button>

              <button
                onClick={() => setPriceChange({...priceChange, type: 'fixed'})}
                className={`p-4 border-2 rounded-lg transition-all ${
                  priceChange.type === 'fixed' 
                    ? 'border-blue-600 bg-blue-50' 
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <DollarSign className="w-6 h-6 mx-auto mb-2 text-blue-600" />
                <p className="font-semibold">قيمة ثابتة</p>
                <p className="text-sm text-gray-500">إضافة أو طرح مبلغ محدد</p>
              </button>
            </div>

            <div className="space-y-2">
              <Label>
                {priceChange.type === 'percentage' 
                  ? 'نسبة التغيير (%)' 
                  : 'قيمة التغيير (ل.س)'}
              </Label>
              <Input
                type="number"
                value={priceChange.value}
                onChange={(e) => setPriceChange({...priceChange, value: parseFloat(e.target.value)})}
                placeholder={priceChange.type === 'percentage' ? 'مثال: 10 للزيادة 10%' : 'مثال: 5000 للإضافة'}
              />
              <p className="text-sm text-gray-500">
                استخدم قيمة موجبة للزيادة وسالبة للتخفيض
              </p>
            </div>

            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="font-semibold mb-2">معاينة التغيير:</p>
              <p className="text-sm text-gray-600">
                سيتم تطبيق التعديل على {products.length} منتج
                {priceChange.value !== 0 && (
                  <span>
                    {' '}بـ{priceChange.type === 'percentage' ? `${priceChange.value}%` : `${priceChange.value.toLocaleString('ar-SY')} ل.س`}
                  </span>
                )}
              </p>
            </div>

            <Button
              onClick={handleBulkPriceUpdate}
              disabled={isUpdating || priceChange.value === 0}
              className="w-full bg-blue-600 hover:bg-blue-700"
            >
              {isUpdating && <Loader2 className="w-4 h-4 ml-2 animate-spin" />}
              تطبيق التعديل على جميع المنتجات
            </Button>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>معلومات المتجر</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            <div className="p-4 bg-blue-50 rounded-lg">
              <p className="text-sm text-gray-600">عدد المنتجات</p>
              <p className="text-2xl font-bold text-blue-600">{products.length}</p>
            </div>
            <div className="p-4 bg-green-50 rounded-lg">
              <p className="text-sm text-gray-600">المنتجات النشطة</p>
              <p className="text-2xl font-bold text-green-600">
                {products.filter(p => p.is_active).length}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

