import React from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { TrendingUp, DollarSign, ShoppingCart, Package } from "lucide-react";
import { BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from "recharts";
import { format, subDays, startOfMonth } from "date-fns";
import { ar } from "date-fns/locale";

export default function Reports() {
  const { data: products = [] } = useQuery({
    queryKey: ['products'],
    queryFn: () => base44.entities.Product.list(),
  });

  const { data: orders = [] } = useQuery({
    queryKey: ['orders'],
    queryFn: () => base44.entities.Order.list('-created_date'),
  });

  const deliveredOrders = orders.filter(o => o.status === 'delivered');
  
  const totalRevenue = deliveredOrders.reduce((sum, o) => sum + o.total, 0);
  const totalProfit = deliveredOrders.reduce((sum, o) => {
    const orderProfit = o.items?.reduce((itemSum, item) => {
      const product = products.find(p => p.id === item.product_id);
      const profit = product ? (item.price - (product.cost || 0)) * item.quantity : 0;
      return itemSum + profit;
    }, 0) || 0;
    return sum + orderProfit;
  }, 0);

  const thisMonthOrders = orders.filter(o => 
    new Date(o.created_date) >= startOfMonth(new Date())
  );

  const last30Days = Array.from({ length: 30 }, (_, i) => {
    const date = subDays(new Date(), 29 - i);
    const dateStr = format(date, 'yyyy-MM-dd');
    const dayOrders = deliveredOrders.filter(o => 
      format(new Date(o.created_date), 'yyyy-MM-dd') === dateStr
    );
    const revenue = dayOrders.reduce((sum, o) => sum + o.total, 0);
    return {
      date: format(date, 'dd/MM'),
      revenue,
      orders: dayOrders.length
    };
  });

  const { data: categories = [] } = useQuery({
    queryKey: ['categories'],
    queryFn: () => base44.entities.Category.list(),
  });

  const categoryStats = categories.map(cat => {
    const catProducts = products.filter(p => p.category_id === cat.id);
    const soldCount = deliveredOrders.reduce((count, order) => {
      const catItems = order.items?.filter(item => 
        catProducts.some(p => p.id === item.product_id)
      ) || [];
      return count + catItems.reduce((sum, item) => sum + item.quantity, 0);
    }, 0);
    
    return {
      name: cat.name,
      value: soldCount,
      products: catProducts.length
    };
  }).filter(stat => stat.value > 0);

  const COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899'];

  return (
    <div className="p-6 space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-gray-900">التقارير والأرباح</h1>
        <p className="text-gray-500 mt-1">تحليل شامل لأداء المتجر</p>
      </div>

      <div className="grid md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-500">إجمالي الإيرادات</p>
                <p className="text-2xl font-bold mt-1">{totalRevenue.toLocaleString('ar-SY')}</p>
                <p className="text-xs text-gray-400">ليرة سورية</p>
              </div>
              <div className="p-3 bg-green-100 rounded-xl">
                <DollarSign className="w-6 h-6 text-green-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-500">صافي الربح</p>
                <p className="text-2xl font-bold mt-1">{totalProfit.toLocaleString('ar-SY')}</p>
                <p className="text-xs text-gray-400">ليرة سورية</p>
              </div>
              <div className="p-3 bg-blue-100 rounded-xl">
                <TrendingUp className="w-6 h-6 text-blue-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-500">الطلبات المكتملة</p>
                <p className="text-2xl font-bold mt-1">{deliveredOrders.length}</p>
                <p className="text-xs text-gray-400">طلب</p>
              </div>
              <div className="p-3 bg-purple-100 rounded-xl">
                <ShoppingCart className="w-6 h-6 text-purple-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-500">هامش الربح</p>
                <p className="text-2xl font-bold mt-1">
                  {totalRevenue > 0 ? ((totalProfit / totalRevenue) * 100).toFixed(1) : 0}%
                </p>
                <p className="text-xs text-gray-400">من الإيرادات</p>
              </div>
              <div className="p-3 bg-orange-100 rounded-xl">
                <Package className="w-6 h-6 text-orange-600" />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>الإيرادات خلال 30 يوم</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={last30Days}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Line type="monotone" dataKey="revenue" stroke="#3b82f6" strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>المبيعات حسب الفئة</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={categoryStats}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={(entry) => entry.name}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {categoryStats.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>الطلبات خلال 30 يوم</CardTitle>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={last30Days}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="orders" fill="#10b981" radius={[8, 8, 0, 0]} />
            </BarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
    </div>
  );
}

