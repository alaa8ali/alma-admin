import React from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Package, ShoppingCart, TrendingUp, AlertTriangle, DollarSign, Users } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { AreaChart, Area, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { format, subDays } from "date-fns";
import { ar } from "date-fns/locale";

export default function Dashboard() {
  const { data: products = [], isLoading: loadingProducts } = useQuery({
    queryKey: ['products'],
    queryFn: () => base44.entities.Product.list(),
  });

  const { data: orders = [], isLoading: loadingOrders } = useQuery({
    queryKey: ['orders'],
    queryFn: () => base44.entities.Order.list('-created_date'),
  });

  const { data: categories = [], isLoading: loadingCategories } = useQuery({
    queryKey: ['categories'],
    queryFn: () => base44.entities.Category.list(),
  });

  const stats = {
    totalProducts: products.length,
    activeProducts: products.filter(p => p.is_active).length,
    lowStock: products.filter(p => p.stock_quantity <= p.min_stock).length,
    totalOrders: orders.length,
    pendingOrders: orders.filter(o => o.status === 'pending').length,
    deliveredOrders: orders.filter(o => o.status === 'delivered').length,
    totalRevenue: orders.filter(o => o.status !== 'cancelled').reduce((sum, o) => sum + (o.total || 0), 0),
    totalProfit: orders.filter(o => o.status === 'delivered').reduce((sum, o) => {
      const orderProfit = o.items?.reduce((itemSum, item) => {
        const product = products.find(p => p.id === item.product_id);
        const profit = product ? (item.price - (product.cost || 0)) * item.quantity : 0;
        return itemSum + profit;
      }, 0) || 0;
      return sum + orderProfit;
    }, 0),
  };

  const last7Days = Array.from({ length: 7 }, (_, i) => {
    const date = subDays(new Date(), 6 - i);
    const dateStr = format(date, 'yyyy-MM-dd');
    const dayOrders = orders.filter(o => format(new Date(o.created_date), 'yyyy-MM-dd') === dateStr);
    return {
      date: format(date, 'dd/MM', { locale: ar }),
      orders: dayOrders.length,
      revenue: dayOrders.reduce((sum, o) => sum + (o.total || 0), 0),
    };
  });

  const topProducts = products
    .map(product => ({
      ...product,
      soldCount: orders.reduce((count, order) => {
        const item = order.items?.find(i => i.product_id === product.id);
        return count + (item?.quantity || 0);
      }, 0),
    }))
    .sort((a, b) => b.soldCount - a.soldCount)
    .slice(0, 5);

  const StatCard = ({ title, value, icon: Icon, color, subtitle, loading }) => (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow duration-300">
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-500 mb-1">{title}</p>
            {loading ? (
              <Skeleton className="h-8 w-20" />
            ) : (
              <h3 className="text-3xl font-bold text-gray-900">{value}</h3>
            )}
            {subtitle && <p className="text-xs text-gray-400 mt-1">{subtitle}</p>}
          </div>
          <div className={`p-4 rounded-2xl ${color} bg-opacity-10`}>
            <Icon className={`w-8 h-8 ${color.replace('bg-', 'text-')}`} />
          </div>
        </div>
      </CardContent>
    </Card>
  );

  return (
    <div className="p-6 space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-gray-900 mb-2">مرحباً بك في لوحة التحكم</h1>
        <p className="text-gray-500">نظرة شاملة على أداء متجرك</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatCard
          title="إجمالي المنتجات"
          value={stats.totalProducts}
          icon={Package}
          color="bg-blue-500"
          subtitle={`${stats.activeProducts} نشط`}
          loading={loadingProducts}
        />
        <StatCard
          title="الطلبات الكلية"
          value={stats.totalOrders}
          icon={ShoppingCart}
          color="bg-green-500"
          subtitle={`${stats.pendingOrders} قيد الانتظار`}
          loading={loadingOrders}
        />
        <StatCard
          title="إجمالي الإيرادات"
          value={`${stats.totalRevenue.toLocaleString('ar-SY')} ل.س`}
          icon={DollarSign}
          color="bg-purple-500"
          loading={loadingOrders}
        />
        <StatCard
          title="صافي الربح"
          value={`${stats.totalProfit.toLocaleString('ar-SY')} ل.س`}
          icon={TrendingUp}
          color="bg-orange-500"
          subtitle={`من ${stats.deliveredOrders} طلب مكتمل`}
          loading={loadingOrders}
        />
      </div>

      {stats.lowStock > 0 && (
        <Card className="border-orange-200 bg-orange-50">
          <CardContent className="p-4 flex items-center gap-3">
            <AlertTriangle className="w-5 h-5 text-orange-600" />
            <p className="text-sm font-medium text-orange-900">
              تنبيه: {stats.lowStock} منتج انخفض مخزونه عن الحد الأدنى
            </p>
          </CardContent>
        </Card>
      )}

      <div className="grid lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>الإيرادات خلال 7 أيام</CardTitle>
          </CardHeader>
          <CardContent>
            {loadingOrders ? (
              <Skeleton className="h-64 w-full" />
            ) : (
              <ResponsiveContainer width="100%" height={250}>
                <AreaChart data={last7Days}>
                  <defs>
                    <linearGradient id="colorRevenue" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.3}/>
                      <stop offset="95%" stopColor="#3b82f6" stopOpacity={0}/>
                    </linearGradient>
                  </defs>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Area type="monotone" dataKey="revenue" stroke="#3b82f6" fillOpacity={1} fill="url(#colorRevenue)" />
                </AreaChart>
              </ResponsiveContainer>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>الطلبات خلال 7 أيام</CardTitle>
          </CardHeader>
          <CardContent>
            {loadingOrders ? (
              <Skeleton className="h-64 w-full" />
            ) : (
              <ResponsiveContainer width="100%" height={250}>
                <BarChart data={last7Days}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="orders" fill="#10b981" radius={[8, 8, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            )}
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>المنتجات الأكثر مبيعاً</CardTitle>
        </CardHeader>
        <CardContent>
          {loadingProducts || loadingOrders ? (
            <div className="space-y-4">
              {Array(5).fill(0).map((_, i) => (
                <Skeleton key={i} className="h-16 w-full" />
              ))}
            </div>
          ) : (
            <div className="space-y-3">
              {topProducts.map((product, index) => (
                <div key={product.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <div className="flex items-center gap-4">
                    <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                      <span className="text-blue-600 font-bold">#{index + 1}</span>
                    </div>
                    {product.main_image && (
                      <img src={product.main_image} alt={product.name} className="w-12 h-12 object-cover rounded-lg" />
                    )}
                    <div>
                      <p className="font-semibold text-gray-900">{product.name}</p>
                      <p className="text-sm text-gray-500">{product.price.toLocaleString('ar-SY')} ل.س</p>
                    </div>
                  </div>
                  <div className="text-left">
                    <p className="text-lg font-bold text-blue-600">{product.soldCount}</p>
                    <p className="text-xs text-gray-500">وحدة مباعة</p>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

